var searchIndex = JSON.parse('{\
"lib":{"doc":"As many classic numerical physics methods as I can …","t":[0,3,11,11,11,11,11,11,11,11,11,11,11],"n":["integrate","RK4","borrow","borrow_mut","from","into","ivp","ivp_dense","new","step","try_from","try_into","type_id"],"q":["lib","lib::integrate","","","","","","","","","","",""],"d":["A crusty numerical physics library.","Fourth-order Runge-Kutta integrator.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Solve the IVP <code>y&#39; = f(t, y), y(t0) = y0</code> for <code>y(t1)</code>. Note …","Solve the IVP <code>y&#39; = f(t, y), y(t0) = y0</code> for <code>y(t1)</code>. Supports …","Create a new RK4 integrator.","Calculate <code>y(t + h)</code> given <code>y&#39; = f(t, y), y(t) = y</code>.","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["",0],["f64",0],["f64",0],["f64",0]],["result",4,[["f64",0],["string",3]]]],[[["",0],["f64",0],["f64",0],["f64",0]],["result",4,[["f64",0],["string",3]]]],[[["f64",0]],["rk4",3]],[[["",0],["f64",0],["f64",0]],["result",4,[["f64",0],["string",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"RK4"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};